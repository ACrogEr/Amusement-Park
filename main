#include <iostream>
#include <string>
#include <limits>
using namespace std;

// Assume the Graph class and NodeRide are already defined as shown before

void admin(Graph& G);
void visitor(Graph& G);

int main() {
    Graph G;
    int in, identity;

    string logo =
        "\n\t\t\t\t\t\t_____ .    . .   .        .    .   . .__         ____  ___     __         _____    ____   \n"
        "\t\t\t\t\t\t|     |    | |\\  |       / \\   |\\  | |  \\    	|     |   )   /  \\   |      |    //      \n"
        "\t\t\t\t\t\t|---  |    | | \\ |      /---\\  | \\ | |   )   	|---  |---   (    )) |      |   ((       \n"
        "\t\t\t\t\t\t|     |____| |  \\|     /     \\ |  \\| |__/    	|     |   \\   \\__/   |___ __|__  \\_____ ";

    cout << "\n\t\t\t\t\t======================================================================================================";
    cout << logo;
    cout << "\n\t\t\t\t\t======================================================================================================\n";

    do {
        cout << "\nEnter your identity:\n1.Authority\n2.Visitor\n";
        cin >> identity;
        cout << "------------------------------\n";
        switch (identity) {
            case 1:
                admin(G);
                break;
            case 2:
                visitor(G);
                break;
        }
        cout << "\nDo you want to continue?(main)\n1.Yes\t0.No\n";
        cin >> in;
    } while (in != 0);

    return 0;
}

void admin(Graph& G) {
    int choice, ch;
    string authority_name;
    cout << "Enter Authority Name: ";
    cin >> authority_name;
    string password;
    cout << "Enter password: ";
    cin >> password;

    if (password == "secret") {
        do {
            cout << "------------------------------\n";
            cout << "\nMenu-Authority:\n1.Create\n2.Add Path\n3.Insert Ride\n4.Display list of all rides\n5.List of Active and Inactive rides\n";
            cout << "Enter choice number: ";
            cin >> choice;
            cout << "------------------------------\n";
            switch (choice) {
                case 1:
                    G.createMat();
                    break;
                case 2:
                    G.addEdge();
                    break;
                case 3:
                    G.addRide();
                    break;
                case 4:
                    G.printallrides();
                    break;
                case 5:
                    G.print_list_activity();
                    break;
            }
            cout << "\nContinue?(admin) \n1.Yes\t0.No\n";
            cin >> ch;
            cout << "------------------------------\n";
        } while (ch != 0);
    } else {
        cout << "INCORRECT PASSWORD!!!!\n";
    }
    cout << "------------------------------\n";
}

void visitor(Graph& G) {
    int select, choice1;
    cout << "........................................................................................................\n";
    cout << "\nWELCOME TO FUN AND FROLIC AMUSEMENT PARK\n\n";
    cout << "HAVE A GREAT DAY AHEAD ! ENJOY TO THE FULLEST !\n";
    cout << "FOLLOW ALL SAFETY MEASURES AND TAKE UP A RIDE AT YOUR OWN RISK\n";
    cout << "FOR EMERGENCY CALL ON : 20120145263\n";
    cout << "........................................................................................................\n";

    do {
        cout << "\nVisitor Menu\n\n1.Display List of active and inactive rides\n2.Find shortest path to the ride\n3.Kids and Adult Ride List\n4.Get all paths\n5.Check if ride is your sector\n";
        cout << "Enter choice number: ";
        cin >> select;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "=========================================================================================================\n";
        switch (select) {
            case 1:
                G.print_list_activity();
                break;
            case 2:
                G.dijkstra();
                break;
            case 3:
                G.print_list_age();
                break;
            case 4:
                G.getPaths();
                break;
            case 5:
                G.hasPath_check();
                break;
        }
        cout << "\nContinue?(Visitor) \n1.Yes\t0.No\n";
        cin >> choice1;
        cout << "-----------------------------\n";
    } while (choice1 != 0);
}
